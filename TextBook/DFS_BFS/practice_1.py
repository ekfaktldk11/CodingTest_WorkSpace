"""
* 음료수 얼려 먹기 (난이도 '중')
- N * M 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시
- 구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주
- 이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하시오

- 입력 예시
4 5 (N * M)
00110
00011
11111
00000

- 출력 예시
3
"""

"""
* 내 접근 방법
- 접근 방법은 비슷하나 풀이를 하지 못함
"""

"""
* 해답
"""
# N, M을 공백으로 구분하여 입력받기
n, m = map(int, input().split())

# 2차원 리스트의 맵 정보 입력받기
graph = []
for i in range(n):
    # 여기서 중요한 것이 graph.append(list(map(int, input().split())))로 실행 시 [[000111011], [110110010], ...] 이런식으로 할당됨
    # 공백없이 입력될 때는 graph.append(list(map(int, input())))로 실행 해야 [[0, 1, 0 ...]] 이런식으로 할당됨
    graph.append(list(map(int, input())))

# DFS로 특정한 노드를 방문한 뒤에 연결된 모든 노드들도 방문
def dfs(x, y):
    #global graph
    # 주어진 범위를 벗어나는 경우에는 즉시 종료
    if x <= -1 or x >= n or y <= -1 or y >= m:
        return False
    # 현재 노드를 아직 방문하지 않았다면 (음료수를 채우지 않았다면)
    if graph[x][y] == 0:
        # 해당 노드를 방문 처리 (빈칸에 음료수 채우기)
        graph[x][y] = 1
        dfs(x - 1, y)
        dfs(x, y - 1)
        dfs(x + 1, y)
        dfs(x, y + 1)
        return True
    return False

# 모든 노드(위치)에 대하여 음료수 채우기
result = 0
for i in range(n):
    for j in range(m):
        # 현재 위치에서 DFS 수행
        if dfs(i, j) == True:
            result += 1

print(result) # 정답 출력

"""
* 해답의 접근 방법
1. 특정한 지점의 주변 상, 하, 좌, 우를 살펴본 뒤에 주변 지점 중에서 값이 '0'이면서 아직 방문하지 않은 지점이
있다면 해당 지점을 방문
2. 방문한 지점에서 다시 상, 하, 좌, 우를 살펴보면서 방문을 다시 진행하면, 연결된 모든 지점을 방문할 수 있음
3. 1 ~ 2 번의 과정을 모든 노드에 반복하며 방문하지 않은 지점의 수를 셈
"""

"""
* 결론
- 문제 설명에 어떤 지점끼리의 상관관계 (ex. ~ 서로 연결되어 있는 ~) 가 주어지면 DFS, BFS 로의 접근을 생각할 필요가 있음
"""