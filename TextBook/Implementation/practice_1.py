"""
* 왕실의 나이트 (난이도 '하')
- 8 x 8 행렬 (행 1 ~ 8) / (열 a ~ h) 에서 나이트가 L 모양으로 움직일 수 있음
- 좌 또는 우로 2만큼 움직이면 상 또는 하로 1만큼 움직일 수 있음
- 상 또는 하로 2만큼 움직이면 좌 또는 우로 1만큼 움직일 수 있음
- 나이트의 위치가 주어졌을 때 행렬의 범위를 벗어나는 경우는 무시하고 나이트가 움직일 수 있는 경우의 수를 출력하는 프로그램을 작성

- 입력 예시
a1

- 출력 예시
2
"""

"""
* 내 접근 방법
- 주어진 위치에서 L 로 움직일 수 있는 총 8가지 -> (2(좌/우) * 2(상/하))*2(수평으로 2/ 수직으로 2) = 8
- 이 8가지의 경우들중 범위를 벗어나는 것을 제외하고 count하여 출력
"""

"""
* 내 코드
"""
str = input()
m = int(str[1])
n = ord(str[0]) - ord('a') + 1

count = 0
# case m_long
if(m + 2 <= 8):
    if (n + 1 <= 8): count += 1 # 첫번째 경우
    if (n - 1 > 0): count += 1 # 두번째 경우
if(m - 2 > 0):
    if (n + 1 <= 8): count += 1 # 세번째 경우
    if (n - 1 > 0): count += 1 # 네번째 경우

# case n_long
if(n + 2 <= 8):
    if (m + 1 <= 8): count += 1 # 다섯번째 경우
    if (m - 1 > 0): count += 1 # 여섯번째 경우
if(n - 2 > 0):
    if (m + 1 <= 8): count += 1 # 일곱번째 경우
    if (m - 1 > 0): count += 1 # 여덟번째 경우


print(count)

"""
* 해답
"""
# 현재 나이트의 위치 입력받기
input_data = input()
row = int(input_data[1])
column = int(ord(input_data[0])) - int(ord('a')) + 1

# 나이트가 이동할 수 있는 8가지 방향 정의
steps = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)]

# 8가지 방향에 대하여 각 위치로 이동이 가능한지 확인
result = 0
for step in steps:
    # 이동하고자 하는 위치 확인
    next_row = row + step[0]
    next_column = column + step[1]
    # 해당 위치로 이동이 가능하다면 카운트 증가
    if next_row >= 1 and next_row <= 8 and next_column >= 1 and next_column <= 8:
        result += 1

print(result)

"""
* 내 풀이와 해답의 풀이 방법비교
- 두 접근 모두 나이트의 현재 위치에서 이동 경로를 더한 다음, 8x8 좌표 평면에 있는지 확인하는 것
- but 풀이에선 나이트의 모든 이동 경우를 반복문으로 처리함
- 나는 총 8가지 경우 밖에 없기에 조건문으로 처리
"""

"""
* 결론
- 입력이 공백을 두고 a 1 로 입력되는 것이 아닌 a1 로 한번에 입력됨
- column의 요소가 정수가 아닌 알파벳 소문자이므로 아스키코드로 변환 하기위한 ord() 사용
"""
